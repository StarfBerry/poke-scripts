import sys
sys.path.append('.')

from Util import decrypt_array_3, u16_from_le_bytes, u32_from_le_bytes, get_hp_type, get_hp_damage, get_ivs

species_id_to_dex_number = [
    1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
    75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
    100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
    140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
    160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
    180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
    200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
    220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 387, 388, 389, 390, 391, 392, 393, 394,
    395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 252, 253, 254,
    255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
    275, 290, 291, 292, 276, 277, 285, 286, 327, 278, 279, 283, 284, 320, 321, 300, 301, 352, 343, 344,
    299, 324, 302, 339, 340, 370, 341, 342, 349, 350, 318, 319, 328, 329, 330, 296, 297, 309, 310, 322,
    323, 363, 364, 365, 331, 332, 361, 362, 337, 338, 298, 325, 326, 311, 312, 303, 307, 308, 333, 334,
    360, 355, 356, 315, 287, 288, 289, 316, 317, 357, 293, 294, 295, 366, 367, 368, 359, 353, 354, 336,
    335, 369, 304, 305, 306, 351, 313, 314, 345, 346, 347, 348, 280, 281, 282, 371, 372, 373, 374, 375,
    376, 377, 378, 379, 382, 383, 384, 380, 381, 385, 386, 358
]

species_to_abilities = [
    [65, 34], [65, 34], [65, 34], [65, 34], [66], [66], [66], [67, 44], [67, 44], [67, 44], [19, 50], [61], [14], 
    [19, 50], [61], [68], [51], [51], [51], [50, 62, 55], [50, 62, 55], [51], [51], [22, 61], [22, 61], [9, 31], 
    [9, 31], [8], [8], [38, 55], [38, 55], [38], [38, 55], [38, 55], [38], [56], [56], [18, 70], [18, 70], [56], 
    [56], [39], [39], [34, 50], [34, 1], [34, 27], [27, 6], [27, 6], [14, 50], [19], [8, 71], [8, 71], [53], [7], 
    [6, 13, 33], [6, 13, 33], [72], [72], [22, 18], [22, 18], [11, 6, 33], [11, 6, 33], [11, 6, 33], [28, 39], 
    [28, 39], [28, 39], [62], [62], [62], [34], [34], [34], [29, 64, 44], [29, 64, 44], [69, 5, 8], [69, 5, 8], 
    [69, 5, 8], [50, 18, 49], [50, 18, 49], [12, 20], [12, 20], [42, 5], [42, 5], [51, 39], [50, 48], [50, 48], 
    [47], [47], [1, 60], [1, 60], [75], [75], [26], [26], [26], [69, 5], [15, 39], [15, 39], [52, 75], [52, 75], 
    [43, 9], [43, 9], [34], [34], [69, 31, 4], [69, 31, 4], [7], [51, 39], [20, 12, 13], [26, 1], [26, 1], 
    [31, 69], [31, 69], [30, 32], [34], [48, 39], [33, 6], [38, 6], [33, 41, 31], [33, 41, 31], [35, 30], 
    [35, 30], [43], [68], [12], [9, 72], [49, 72], [52], [22], [33], [22], [11, 75], [7], [50], [11], [10], 
    [18, 62], [36], [33, 75], [33, 75],  [33, 4], [33, 4], [69, 46], [17, 47], [46], [46, 9], [46, 49], [61, 63], 
    [61, 63], [39], [46], [28], [65], [65], [65], [66, 18], [66, 18], [66, 18], [67], [67], [67], [50, 51], 
    [50, 51], [15, 51], [15, 51], [68, 48], [68, 48], [68, 15], [68, 15], [39], [10, 35, 11], [10, 35, 11], 
    [9, 31], [56], [56], [55, 32], [55, 32], [28, 48], [28, 48], [9, 57], [9, 57], [9, 57], [34], [47, 37], 
    [47, 37], [5, 69], [11, 6, 2], [34], [34], [34], [50, 53], [34, 48], [34, 48], [3, 14], [6, 11], [6, 11], 
    [28], [28, 39], [15], [12, 20], [26], [26], [23], [39, 48], [5], [5], [32, 50], [52, 8, 17], [69, 5], 
    [22, 50], [22], [38, 33, 22], [68], [5], [68, 62], [39, 51], [53], [62], [40, 49], [40, 49], [12, 47], 
    [12, 47], [55, 30], [55], [21], [72, 55, 15], [33, 11, 41], [51, 5], [48, 18], [48, 18], [33, 6], [53, 8], 
    [5, 8], [36], [22], [20], [62, 72], [22], [12], [9, 72], [49, 72], [47], [30, 32], [46, 39], [46, 39], 
    [46, 39], [62, 8], [61], [45], [46], [46], [30], [65], [65], [65], [66, 3], [66, 3], [66, 3], [67, 6], 
    [67, 6], [67, 6], [50], [22], [53], [53], [19, 50], [61], [68], [61], [19, 14], [33, 44, 20], [33, 44, 20], 
    [33, 44, 20], [34, 48], [34, 48], [34, 48], [62], [62], [51, 44], [51, 2, 44], [28, 36], [28, 36], [28, 36], 
    [33, 44], [22], [27], [27], [54], [72], [54], [14, 50], [3], [25], [43], [43], [43], [47, 62], [47, 62], 
    [47, 37], [5, 42], [56], [56], [51], [52, 22], [5, 69], [5, 69], [5, 69], [74], [74], [9, 31, 58], 
    [9, 31, 58], [57, 31], [58, 10], [35, 68], [12], [30, 38], [64, 60], [64, 60], [24, 3], [24, 3], [41, 12, 46], 
    [41, 12, 46], [12, 20], [40], [73, 70, 75], [47, 20], [47, 20], [20], [52, 71], [26], [26], [8, 11], [8, 11], 
    [30, 13], [30, 13], [17], [61], [26], [26], [12], [12], [52, 75], [52, 75], [26],  [26], [21], [21], [4, 33], 
    [4, 33], [33, 12], [63, 56], [59], [16], [15], [15], [26], [46], [34], [26], [46], [23], [39], [39], [47, 12], 
    [47, 12], [47, 12], [75], [33, 41], [33], [33, 69, 5], [33], [69], [69], [22], [29], [29], [29], [29, 5], 
    [29], [29], [26], [26], [2], [70], [77], [32], [46]
]

species_to_gender_ratio = [
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 254, 254, 254, 0, 0, 0, 192, 192, 192, 192, 192, 192, 128, 128, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 64, 64, 128, 128, 128, 64, 64, 64, 64, 64, 64, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 128, 128, 128, 255, 255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 255, 255, 128, 128, 128, 128, 0, 0, 128, 128, 128, 128, 128, 254, 128, 254, 128, 
    128, 128, 128, 255, 255, 128, 128, 254, 64, 64, 128, 0, 128, 128, 128, 255, 32, 32, 32, 32, 255, 32, 32, 32, 
    32, 32, 32, 255, 255, 255, 128, 128, 128, 255, 255, 32, 32, 32, 32, 32, 32, 32, 32, 32, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 128, 192, 192, 32, 32, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 128, 32, 32, 128, 128, 128, 255, 128, 128, 128, 128, 128, 128, 128, 192, 192, 128, 
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 192, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 255, 128, 
    128, 0, 0, 254, 64, 64, 254, 254, 255, 255, 255, 128, 128, 128, 255, 255, 255, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 128, 128, 255, 128, 128, 128, 64, 64, 192, 128, 192, 192, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 0, 254, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 128, 255, 255, 128, 128, 128, 128, 255, 255, 32, 32, 32, 32, 128, 128, 128, 128, 128, 
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 32, 192, 128, 128, 128, 255, 255, 255, 255, 
    255, 255, 254, 0, 255, 255, 255, 255, 255
]

class PK3:
    def __init__(self, data, decrypted=False):
        if not decrypted:
            data = decrypt_array_3(data)
        
        self.data = data
        self.pid = u32_from_le_bytes(self.data, 0x00)
        self.tid = u16_from_le_bytes(self.data, 0x04)
        self.sid = u16_from_le_bytes(self.data, 0x06)
        self.pkrs = self.data[0x44]
        self.iv32 = u32_from_le_bytes(self.data, 0x48)
        self.ivs = self.all_ivs()
    
    def is_shiny(self):
        return ((self.pid >> 16) ^ (self.pid & 0xffff) ^ self.tid ^ self.sid) < 8
    
    def nature(self):
        return self.pid % 25

    def gender(self):
        gr = species_to_gender_ratio[self.species()]
        if gr == 255:
            return 2 # genderless
        elif gr == 254:
            return 1 # female only
        elif gr == 0:
            return 0 # male only
        return 1 if (self.pid & 0xff) < gr else 0
    
    def species_id(self):
        return u16_from_le_bytes(self.data, 0x20)
    
    def species(self):
        return species_id_to_dex_number[self.species_id()]
    
    def held_item(self):
        return u16_from_le_bytes(self.data, 0x22)
    
    def ot_friendship(self):
        return self.data[0x29]
    
    def move1(self):
        return u16_from_le_bytes(self.data, 0x2C)
    
    def move2(self):
        return u16_from_le_bytes(self.data, 0x2E)
    
    def move3(self):
        return u16_from_le_bytes(self.data, 0x30)
    
    def move4(self):
        return u16_from_le_bytes(self.data, 0x32)

    def move1_pp(self):
        return self.data[0x34]
    
    def move2_pp(self):
        return self.data[0x35]
    
    def move3_pp(self):
        return self.data[0x36]
    
    def move4_pp(self):
        return self.data[0x37]
    
    def ev_hp(self):
        return self.data[0x38]
    
    def ev_atk(self):
        return self.data[0x39]
    
    def ev_def(self): 
        return self.data[0x3A]
    
    def ev_spa(self):
        return self.data[0x3B]
    
    def ev_spe(self):
        return self.data[0x3C]
    
    def ev_spd(self):
        return self.data[0x3D]
    
    def pkrs_days(self):
        return self.pkrs & 0xF
    
    def pkrs_strain(self):
        return self.pkrs >> 4
    
    def all_ivs(self):
        ivs = [0] * 6
        ivs[0] = self.iv_hp()
        ivs[1] = self.iv_atk()
        ivs[2] = self.iv_def()
        ivs[3] = self.iv_spa()
        ivs[4] = self.iv_spd()
        ivs[5] = self.iv_spe()        
        return ivs

    def iv_hp(self):
        return self.iv32 & 0x1F
    
    def iv_atk(self):
        return (self.iv32 >> 5) & 0x1F
    
    def iv_def(self):
        return (self.iv32 >> 10) & 0x1F
    
    def iv_spe(self):
        return (self.iv32 >> 15) & 0x1F

    def iv_spa(self):
        return (self.iv32 >> 20) & 0x1F

    def iv_spd(self):
        return (self.iv32 >> 25) & 0x1F
    
    def hidden_power_type(self):
        return get_hp_type(self.ivs)
    
    def hidden_power_dmge(self):
        return get_hp_damage(self.ivs)

    def is_egg(self):
        return ((self.iv32 >> 30) & 1) == 1

    def ability_bit(self):
        return self.iv32 >> 31
    
    def ability(self):
        return species_to_abilities[self.species()][self.ability_bit()]
    
    def level(self):
        return self.data[0x54]
    
    def stat_current_hp(self):
        return u16_from_le_bytes(self.data, 0x56)
    
    def stat_max_hp(self):
        return u16_from_le_bytes(self.data, 0x58)
    
    def stat_atk(self):
        return u16_from_le_bytes(self.data, 0x5A)
    
    def stat_def(self):
        return u16_from_le_bytes(self.data, 0x5C)
    
    def stat_spe(self):
        return u16_from_le_bytes(self.data, 0x5E)
    
    def stat_spa(self):
        return u16_from_le_bytes(self.data, 0x60)
    
    def stat_spd(self):
        return u16_from_le_bytes(self.data, 0x62)