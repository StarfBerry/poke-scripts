import os, sys
sys.path.append(os.path.dirname(__file__))

from Matrix_GF2.GF2 import gf2_to_int, xoroshiro_jump_poly

class Xoroshiro:
    MASK = 0xFFFFFFFFFFFFFFFF

    def __init__(self, s0, s1=0x82A2B175229D6A5B):
       self.s0 = s0
       self.s1 = s1
    
    @property
    def state(self):
        return (self.s0 << 64) | self.s1

    @property
    def states(self):
        return (self.s0, self.s1)
    
    def next(self):
        s0, s1 = self.s0, self.s1
        res = (s0 + s1) & Xoroshiro.MASK
        s1 ^= s0
        
        self.s0 = Xoroshiro.rotl(s0, 24) ^ s1 ^ (s1 << 16) & Xoroshiro.MASK
        self.s1 = Xoroshiro.rotl(s1, 37)
        
        return res
    
    def prev(self):
        s1 = Xoroshiro.rotl(self.s1, 27)
        s0 = self.s0 ^ s1 ^ (s1 << 16) & Xoroshiro.MASK
        s0 = Xoroshiro.rotl(s0, 40)
        s1 ^= s0
        
        self.s0 = s0
        self.s1 = s1
        
        return (s0 + s1) & Xoroshiro.MASK
    
    def jump_ahead(self, n):
        jump = xoroshiro_jump_poly(n)
        s0 = s1 = 0

        while jump:
            if jump & 1:
                s0 ^= self.s0
                s1 ^= self.s1
            
            self.next()
            jump >>= 1
        
        self.s0, self.s1 = s0, s1
            
    def advance(self, n=1):
        for _ in range(n):
            self.next()
    
    def back(self, n=1):
        for _ in range(n):
            self.prev()

    def rand(self, n=0xffffffff):
        mask = Xoroshiro.get_mask(n)
        rnd = self.next() & mask
        while rnd >= n:
            rnd = self.next() & mask
        return rnd

    def clone(self):
        return Xoroshiro(self.s0, self.s1)
         
    @staticmethod
    def rotl(x, k):
        return ((x << k) | (x >> (64 - k))) & Xoroshiro.MASK
    
    @staticmethod
    def get_mask(x):
        x -= 1
        for i in range(6):
            x |= x >> (1 << i)
        return x
    
    @staticmethod
    def advance_state(state, n):
        rng = Xoroshiro(state >> 64, state & Xoroshiro.MASK)
        rng.advance(n)
        return rng.state
    
    @staticmethod
    def backward_state(state, n):
        rng = Xoroshiro(state >> 64, state & Xoroshiro.MASK)
        rng.back(n)
        return rng.state
    
    @staticmethod
    def recover_swsh_seed_from_state(s0, s1, max_advc=10_000):
        rng = Xoroshiro(s0, s1)
        for _ in range(max_advc):
            if rng.s1 == 0x82A2B175229D6A5B:
                return rng.s0
            rng.prev()
        return -1
    
    @staticmethod
    def calc_swsh_raid_seed_distance(s1, s2):
        return (0xC855099EEB5DB5D3 * (s2 - s1)) & Xoroshiro.MASK
    
    @staticmethod
    def recover_state_from_128_lsb(bits):
        if len(bits) != 128:
            raise ValueError("128 bits are needed to recover the internal state.")

        vec = gf2_to_int(bits)

        state = 0
        for i in range(128):
            bit = (vec & MAT_XOROSHIRO_128_LSB_INV[i]).bit_count() & 1
            state |= bit << i

        return state

MAT_XOROSHIRO_128_LSB_INV = (
    0xC1FED39E3D33A407A10AE2D3E8D7C58C, 0xABD3BAF25622571D3A9507CBEEB465B0, 0x263BFA7F89C737AA6B91E11E86093F1F, 0x0861F7EAB6D2F94608AD24BF10E9E679, 
    0xD50B5D0934DA48466B47FB6A38C0CD19, 0xF6769555726B6DA5FC71C22844A36D2B, 0x713045A28FC2FB013693C8B97CEEFCB9, 0xF5C0B79BC44F7FE1BEBD1ECA96F27460, 
    0x0D6992944477276EB221B010D0BE0F4E, 0x61DA8F1F18A4C5F88BBC1A0DEE41CB22, 0x352F939FFC67F98C8D9976FC2DE667F8, 0x363ADE67FFBBCB15C2CFF3AE8B5AA2F4, 
    0xAA81D4C4FB94C6CF6B578346CA21A7E1, 0x9B1D4E034014E5EF9FB135B1E65E1305, 0xEE098A897786C9CC08F250B6D4A90477, 0x4AED84EE58FE6D7450FC0F545E93E58B, 
    0x4408C56FA04B5DA9DDC2FAA884058DDC, 0x8E017E074C058F1DA67362E036FBF735, 0x0E5D8427DE2A5DA115CE8F784DAAB89E, 0xE12129A0FB34C0D7EFAED50B3BBE95E7, 
    0x4C1C9CE05F9603F3EAA4D23495965BE8, 0x9BF86E22991C93AE6C49CB2E864DCC23, 0xA4AC84BA3441FD6C4C553B6AE630F052, 0x793BD9A819D0968075923E06EA354C03, 
    0xAD7EC16459085D040F3B4E8B091A831B, 0x4C02893EB551D2F6496CA5E98487996C, 0xEAFD83FB0241DAAEF208CA9A81B0381A, 0x3574B8DAC1299F13C1F7573C30E7E2DD, 
    0x2A0360C3725C883B9C74B0107EB995F1, 0xB966D82AC672F16CA60DECF34203293D, 0x25C59EADFCBC1B32D77AE7067CFC9378, 0xF4E9CE6FAB5973FEC5CDD2296CED89B1, 
    0xFFC40030C5C7BC2F15718D86FD6E6AB8, 0x2964EC40D85ADAFCC28307E41D8A6E53, 0x90E8AA61EC983B90429CA0A1D3EFCB40, 0x9301264E2688E453EB0FA6C19915D2F9, 
    0x8C104E2ECF0112D2191C2817C713BBD8, 0x80044147289DA1EA84ADC7BB2BCD5000, 0x8C4C7CEDD86AFF4180EFDE8078C05F80, 0x038DC1B5026D33555EBFC229893D2637, 
    0xB5C73B3AFA4E83D07D77AEC41D13AD11, 0xA204ED08617AFA587D42F8619E14E28D, 0xD080789DAF1C1E43B15B506087BB619A, 0x24597806C3D98541BE02CB2D9F1ED92F, 
    0x7A17AFBF45EC57198E0BB3CBA0A3DB75, 0x134EB63A4987E1FF6F49EA79FB270E35, 0xF9FD4A9C30022BFD3F2F0EFF9B7CA45F, 0x6FC9B774ABDB0A718C0A3145C500842E, 
    0x468CCF7E5EFC6E57D63F041EE0AF0265, 0x9EFA2F900A8B4D5816DCF555B3464F21, 0xF895A5DA628FA0E9D171B91F463FEF13, 0xA1A29D028B6E49D36F6B620D47624E80, 
    0x8B0B5F8800C70008200B6C4F99EC9FDE, 0xF0AD423169FD3B5C2EE176F9F4697456, 0x73242FB4F44D9EFEE3C65DD6F4E52A56, 0xFBFF8EF8A49A0ED042C686B3EC904033, 
    0xD92A31BF4B30063D0A358B394DD59034, 0x65C15BBAB930D30EA202F54C084A2A6F, 0xEA6BB67BC62DD88B8802B8C3C33A4E99, 0x80A10744C0962EA02800479EE3D42427, 
    0xD27EE2CE5BCEAC8966C464CA1DAD530E, 0xCA414B37D2907BBD14FF74CDD6008AA7, 0x243621EDD2181B43D95DADD17020CFD9, 0xF367B9440D9189DF887E8093AE4A537B, 
    0xC1FED39E3D33A407A10AE2D3E8D7C58D, 0xB343C1A7B7CCEA4B321135BD48AE7AB1, 0x212079158D1D5100D6EE654D94737371, 0x63E703111374BD33FB19F6417D541C5A,
    0x910A0597A714FF23989984DF5373A802, 0x577EE6E07D6812F7979CED9F1C4F0E1E, 0x3982B5AF0871F1824A965EE242D34EE7, 0x01EFE8E54F97D1D2A2AA795DD7B5C28A,
    0x2BF4FEE0D778E4906CB264E326F01324, 0x922898A9299BD1D7FCB988848F22239D, 0xEABCFD76ABD1ED6F958D1477A7E76FA4, 0xBB23409B424317BA6EB1FB934A04A63E,
    0x977D096ABFB91FAA4FB5E69BFB3799A2, 0x6A3E8739D430E7E93409C8F93DBB6D22, 0xAD443202306119BFDF7F1BDA0DF73976, 0x5CF3B970084B2EB119B158BD3AD07A36,
    0xA55AC383228A68C4895B982D3B4DC571, 0x6849216EA49EB2E061FFD94DDF31A399, 0xF9AA1B58C62503D499180D69C31098F9, 0x537DC8503C6F8F78F29E4C0FF78F158E,
    0x879E2B952DF7A5EEAEA138AC85020F36, 0x4F27805B447C616C751735DF57A3F110, 0xA5E608BDE456E3F9150E3B217602181D, 0xDDCE9EBAFF768C47B14178E486F54A1E,
    0x39F4D585AD13E9AB2F9E2866F2813654, 0x046ECAE51161E471FBD7FE4B64C606DE, 0x0C3A73FD48598AC4EBAE44CB8ABE3EED, 0xB6819D68EA7594C98AB91DEDB6D2C9C4,
    0x7DAC97A98F2365D4E00530F1F44BFE90, 0xF5112CD5D5FC9E38712E2ECE4E115703, 0x350671789119E9BEC620AE785D2F5F8A, 0x5EF7F6F393D6A0A71A19AB8B4AF6B382,
    0x1321A814702A24B1E4C986A023B210EF, 0xCB046705C7DF2CFEAFA49696E4579721, 0x7B6147D8353D878636BD1242A9918381, 0x89D20366AE66AA8E8F4CC6E03869CC65,
    0x4FA55010FE4899230E641C0C1B902D9C, 0xEA5B6678D05252F39F9F2A4370019FF0, 0xE039C022271D696A057039DD6E751A68, 0x5686EAB2A47FFD1E814B4BD24AE4C9F4,
    0x83F525B22B5C0BDA4B4E4AD186352B1A, 0x7E1F7A94DF4C2A1565FDD67A60DC4A62, 0x455B71411EE0C4AB10A34EC83A9CAA8C, 0xAC48F2D9834F3E1205873E7C9715C297,
    0x661DD13F8CDC0AF7CBB6F97D9ACE951E, 0x0FF5BE75F5D35ABD44D4F48960727F09, 0x3BB79B539750E987E9292B9FBB9B2F90, 0xF7F08EB414F70D965943952CEE2C33FE,
    0x717491B53DFE0ADE07F71D35BBAE3A22, 0xD7ABA46A3333F455872D0CF628BD0F84, 0x0AE2168A512E8DE93A55C51292557715, 0xFB579D446845B00E7846706D02CDE8B7,
    0x130E4DF56A64A5E4B2D2279C90E3AD06, 0x255EC7493C45CDD4C3AB6CBAA093A463, 0x19CD5E01761EA0D96028F3AE952AEFEC, 0xAFF94F7E40231EA77A2FE69311E36BD1,
    0xABEF036496EEA7314F75DDA99E49624F, 0x2E4A66E14048E56B0CF73B40F1B30C9F, 0x03B0A82AC1A47CA30AC293E74D7BFDFA, 0x7F2185AB1A22152B0BB8D3E54E925156,
    0x80B73A4FEB7B1970E3C26B0226B98FA8, 0xEB989D7A5A9B4F48989DBAF82645BC26, 0x023CEFFFCE32903106196F241591CA2A, 0xEB4FA797C2A8EFAEB31D5FCA77F784CA)

if __name__ == "__main__":
    from random import randrange
    
    lim = 1 << 64

    '''rng = Xoroshiro(0)
    it = 10_000

    a = [rng.next() for _ in range(it)]
    b = [rng.prev() for _ in range(it)]
    b.reverse()

    print(a == b)'''
    
    seed = randrange(0, lim)
    rng = Xoroshiro(seed)
    rng.advance(42)

    state = rng.state
    bits = [rng.next() & 1 for _ in range(128)]

    test = Xoroshiro.recover_state_from_128_lsb(bits)

    print(f"Expected: {state:032X}")
    print(f"Result:   {test:032X}")
    print(state == test)

    '''seed = randrange(0, 1 << 64)
    a = 12_345_678

    rng1 = Xoroshiro(seed)
    rng1.advance(a)
    print(hex(rng1.state))

    rng2 = Xoroshiro(seed)
    rng2.jump_ahead(a)
    print(hex(rng2.state))'''