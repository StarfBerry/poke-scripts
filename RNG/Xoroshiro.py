import os, sys
sys.path.append(os.path.dirname(__file__) + "\..")

from Util.Bits import bits_to_int

class Xoroshiro:
    MASK = 0xFFFFFFFFFFFFFFFF

    def __init__(self, s0, s1=0x82A2B175229D6A5B):       
        self.s0 = s0
        self.s1 = s1
    
    @property
    def state(self):
        return (self.s0 << 64) | self.s1

    @property
    def states(self):
        return (self.s0, self.s1)
    
    def next(self):
        s0, s1 = self.s0, self.s1
        res = (s0 + s1) & Xoroshiro.MASK
        s1 ^= s0
        
        self.s0 = Xoroshiro.rotl(s0, 24) ^ s1 ^ (s1 << 16) & Xoroshiro.MASK
        self.s1 = Xoroshiro.rotl(s1, 37)
        
        return res
    
    def prev(self):
        s1 = Xoroshiro.rotl(self.s1, 27)
        s0 = self.s0 ^ s1 ^ (s1 << 16) & Xoroshiro.MASK
        s0 = Xoroshiro.rotl(s0, 40)
        s1 ^= s0
        
        self.s0 = s0
        self.s1 = s1
        
        return (s0 + s1) & Xoroshiro.MASK
    
    def rand(self, n=0xffffffff):
        mask = Xoroshiro.get_mask(n)
        rnd = self.next() & mask
        while rnd >= n:
            rnd = self.next() & mask
        return rnd

    def jump_ahead(self, n):
        i = 0
        
        while n and i < 128:
            if n & 1:
                jump = XOROSHIRO_JUMP_TABLE[i]
                s0 = s1 = 0

                while jump:
                    if jump & 1:
                        s0 ^= self.s0
                        s1 ^= self.s1
                    
                    self.next()
                    jump >>= 1
                
                self.s0, self.s1 = s0, s1
            
            n >>= 1
            i += 1          
            
    def advance(self, n=1):
        for _ in range(n):
            self.next()
    
    def back(self, n=1):
        for _ in range(n):
            self.prev()
    
    @staticmethod
    def rotl(x, k):
        return ((x << k) | (x >> (64 - k))) & Xoroshiro.MASK
    
    @staticmethod
    def get_mask(x):
        x -= 1
        x |= x >> 1
        x |= x >> 2
        x |= x >> 4
        x |= x >> 8
        x |= x >> 16
        return x
        
    # Recover the internal state of Xoroshiro using the lsb of 128 consecutive outputs.
    @staticmethod
    def recover_state_from_128_lsb(bits):
        if len(bits) != 128:
            raise ValueError("128 bits are needed to recover the internal state.")

        vec = bits_to_int(bits)

        return sum(((vec & MAT_XOROSHIRO_128_LSB_INV[i]).bit_count() & 1) << i for i in range(128))

class XoroshiroBDSP(Xoroshiro):
    def __init__(self, seed=0):
        self.s0 = XoroshiroBDSP.splitmix(seed, 0x9E3779B97F4A7C15)
        self.s1 = XoroshiroBDSP.splitmix(seed, 0x3C6EF372FE94F82A)
                
    def next(self):
        return super().next() >> 32
    
    def prev(self):
        return super().prev() >> 32

    def rand(self, lim):
        return self.next() % lim

    @staticmethod
    def splitmix(seed, state):
        seed = (seed + state) & Xoroshiro.MASK
        seed = (0xBF58476D1CE4E5B9 * (seed ^ (seed >> 30))) & Xoroshiro.MASK
        seed = (0x94D049BB133111EB * (seed ^ (seed >> 27))) & Xoroshiro.MASK
        return seed ^ (seed >> 31)
    
    @staticmethod
    def recover_state_from_128_lsb(bits):
        raise AttributeError("'recover_state_from_128_lsb' method is not available for 'XoroshiroBDSP'. Try with the 'Xoroshiro' class.")

def recover_swsh_seed_from_state(s0, s1, min_advc=0, max_advc=10_000):
    rng = Xoroshiro(s0, s1)
    rng.back(min_advc)
    advc = max_advc - min_advc
    
    for _ in range(advc + 1):
        if rng.s1 == 0x82A2B175229D6A5B:
            return rng.s0
        
        rng.prev()
    
    return -1

def calc_swsh_raid_seed_distance(s1, s2):
    return (0xC855099EEB5DB5D3 * (s2 - s1)) & Xoroshiro.MASK

def recover_swsh_seed_from_128_lsb(bits, min_advc=0, max_advc=10_000):
    state = Xoroshiro.recover_state_from_128_lsb(bits)
    return recover_swsh_seed_from_state(state >> 64, state & Xoroshiro.MASK, min_advc, max_advc)

XOROSHIRO_JUMP_TABLE = (
    0x00000000000000000000000000000002, 0x00000000000000000000000000000004, 0x00000000000000000000000000000010, 0x00000000000000000000000000000100, 
    0x00000000000000000000000000010000, 0x00000000000000000000000100000000, 0x00000000000000010000000000000000, 0x0008828E513B43D5095B8F76579AA001,
    0x7A8FF5B1C465A931162AD6EC01B26EAE, 0xB18B0D36CD81A8F5B4FBAA5C54EE8B8F, 0x23AC5E0BA1CECB291207A1706BEBB202, 0xBB18E9C8D463BB1B2C88EF71166BC53D,
    0xE3FBE606EF4E8E09C3865BB154E9BE10, 0x28FAAAEBB31EE2DB1A9FC99FA7818274, 0x30A7C4EEF203C7EB588ABD4C2CE2BA80, 0xA425003F3220A91D9C90DEBC053E8CEF,
    0x81E1DD96586CF985B82CA99A09A4E71E, 0x4F7FD3DFBB820BFB35D69E118698A31D, 0xFEE2760EF3A900B349613606C466EFD3, 0xF0DF0531F434C57DBD031D011900A9E5,
    0x442576715266740C235E761B3B378590, 0x1E8BAE8F680D2B353710A7AE7945DF77, 0xFD7027FE6D2F676475D8E7DBCEDA609C, 0x28EFF231AD438124DE2CBA60CD3332B5, 
    0x1808760D0A0909A1377E64C4E80A06FA, 0xB9A362FAFEDFE9D20CF0A2225DA7FB95, 0xF57881AB117349FD2BAB58A3CADFC0A3, 0x849272241425C9968D51ECDB9ED82455, 
    0xF1CCB8898CBC07CD521B29D0A57326C1, 0x61179E44214CAAFAFBE65017ABEC72DD, 0xD9AA6B1E93FBB6E46C446B9BC95C267B, 0x86E3772194563F6D64F80248D23655C6, 
    0xD4E95EEF9EDBDBC6FAD843622B252C78, 0x05667023C584A68A598742BBFDDDE630, 0x401AACF87A5E21EE3A9D7DCE072134A6, 0xE114B1E65A950E43F0CC32EAF522F0E0, 
    0x905DFF85834FB8D1EB2BEAA80D3FD8A7, 0xC449C069734817CB61F29536E1BB6B99, 0x1E5BC0FE7032F3DF390CD235D35187DA, 0x3F399E6F1EA22DBC744E5F1168BA3345, 
    0xD47A02636F041CCA8CC9AA88A153F5F8, 0xF83C06B106D3B7AB08D037056C80B9E0, 0x14223EEDAE116A834CE3C123D196BF7A, 0x24BFD164204335AEB1B206870DA4E89A, 
    0x4A5953C8F4BC2A51207BB2453717CF67, 0xF6B3F196DC551CCFA14E342BB11FF7E6, 0x5B6233B76FA214D75422BCA5015DD3B7, 0xF20D7136458BD924EDE7341C00C65B85, 
    0x9B19BA6B3752065AD769CFC9028DEB78, 0x4F27796502238C48C7B0E531ABE7E4BD, 0xB7B17DCD250033051C6D3BA4BB94182A, 0xAAAE579366147D073AE9471D0E2D0BCF, 
    0x0D56BB288C661CCF8F9CD3794CA46FBF, 0x0402342EEDFF424CDB2AD4E9C15A9D4E, 0x4E71559E6D0E7F0079E061AF5BE21395, 0x8367AF1C9D6C140696E7D88C0794E785, 
    0x0DBFCD2453D1D33FCCDDA809DB64B3E7, 0x3309E57F180D4FF66C64681C21CD0286, 0xB439F330AB3B9715ACB8D4C6BA67113E, 0xC58F079D0205BCF3BAD04CA5D96E2CD3, 
    0x09417D8C80A37AA7EBFBC2723A906760, 0x52F51AC639E0971238AC01316167183D, 0xF37EAD6EA53B96BA7A134006D4EFA484, 0xDC1C01799CB8D734351561E58F8572D4, 
    0x170865DF4B3201FCDF900294D8F554A5, 0xB2A7B279A8CB1F502992EAD4972EAED2, 0xE7859C665BE57882C026A7D9E04A7700, 0x4B4A7AA8C389701CB4CB6197DEA2B1FE, 
    0xADB7753D55646EEF0DCFC5B909E7DF4D, 0xC80926301806A352468431669864F789, 0xC05DA051EC96AF1D22B6C1736285FCC8, 0xF88F6BAC8FD3044874C1DAAC8729D8BB, 
    0x752B98D002C408F7847757C126B23E45, 0x1AA7BC96DBACE1100F9EAA62D0C9E2A3, 0xC469B29353A4984B7475D71B98314377, 0x4B6DD41BCE3BB499BBB7D266D61C85EA, 
    0xE023777E70B3A2F8C419B3742570E16F, 0x131E94FB35203D802A71DB3A3CE8B968, 0x9240C95B1E7FA08B2897BB8961B4DCE9, 0xB879FCA0915F893FF0FC3553D7881D5F, 
    0x2ADCA86FBEFE1366E754DB3FBC7536BC, 0x0A40A688D77855BA0A9E201ADFE7BAA9, 0x17771C905E0775A81D0D601E49C35837, 0x2CF775E419A607E09B031395AEC7B584,
    0x93A7CF27DEC9B30679EAD2EEDDF66699, 0x93615189FE85B7D5E1B9805C107679FC, 0x466421124B50FBFB2C3925DCD790E3D6, 0x1CDA7BD04E3BB94BDCA9B0FA4E95600E,
    0x5EC431D73BBFE49FEFC7905E1CBB5FFB, 0x31A1F85FD532F302854414811D534483, 0xED9B991C09177E2FADB9BA2958F30B6E, 0x38D9E87DFFDFCA7076F8FDF26B0D1CBB,
    0xD8E9E7254052AF4D51F21CDDCEBDB8C7, 0x62769780D13FBC08A03F796EFB295305, 0x66E5456C2EAEDBFF4F2083F6B19E628A, 0xACE8D6CE8E3FBA178B2BE9CD79734BED,
    0xDDDF9B1090AA7AC1D2A98B26625EEE7B, 0x00D67DC46AD286954FFF128094EDD94C, 0xF9540570703E7CF3726438E9A1D3C6EA, 0x066A9599766619B592CC6A0937C9D34E,
    0xA4E540C7AC49AA1BC5730DE058E1047F, 0xC2EDFC1AB51C00ADE408BBECDA066551, 0xF11753A4339E78C3C5477EA8821CE588, 0xBB42E906EFB125403C6058E633063180,
    0x4E86F36C495EEEDBBEC40E0518086E21, 0xE8345A7C487FEFD6465276434FD98954, 0x688B7628742214343ADAEA5CDFE12E3B, 0x833801923A05F253C9DFFA95904E99B1,
    0x58A00D23A8086646A10C3FB0B18DF787, 0xEC69708D487DBFC4A4E41F760281C3D0, 0x47176F17DE7FF0E9B8880FFF0E41261C, 0x4F40C533643920EA58EE3B30F542767E,
    0x83FD48D6B962058415F2D25B60C5ACD7, 0x0CE303C7D3AABBC8E448C83950A687EA, 0x1746715DF0DD8FE3A6FF7863C363CFD4, 0xC00185964CAEF8BB7E9D8517B195D9C9,
    0xB6BDE02BD004B14440DDB4DAF3FBDDA8, 0xBA43C63EC5A9F1877A794B820672A49B, 0x2467071B1D261621C1BE31E7536236FB, 0x5A6FC0435F011DAAF0EEC34DAEA486FB,
    0xA5AF34331C044D81F42C01A2A3815DB4, 0xDB43B553CD16EA44DF7964C343B312DE, 0x432C2BBCD03E65F68454182464C29903, 0xCDF56412D1E7BA6E7B6C0ECC6CB5ADBB,
    0xAC13C8B2FF838036380B97764C9F7748, 0x71D208CC2E5C56E91868A9F5A4FD4D64, 0xD1D08A01B73DE005E89F5FE075D74A79, 0xA9495C12936AD0FD25AA87F3C2704C69)

MAT_XOROSHIRO_128_LSB_INV = (
    0xC1FED39E3D33A407A10AE2D3E8D7C58C, 0xABD3BAF25622571D3A9507CBEEB465B0, 0x263BFA7F89C737AA6B91E11E86093F1F, 0x0861F7EAB6D2F94608AD24BF10E9E679, 
    0xD50B5D0934DA48466B47FB6A38C0CD19, 0xF6769555726B6DA5FC71C22844A36D2B, 0x713045A28FC2FB013693C8B97CEEFCB9, 0xF5C0B79BC44F7FE1BEBD1ECA96F27460, 
    0x0D6992944477276EB221B010D0BE0F4E, 0x61DA8F1F18A4C5F88BBC1A0DEE41CB22, 0x352F939FFC67F98C8D9976FC2DE667F8, 0x363ADE67FFBBCB15C2CFF3AE8B5AA2F4, 
    0xAA81D4C4FB94C6CF6B578346CA21A7E1, 0x9B1D4E034014E5EF9FB135B1E65E1305, 0xEE098A897786C9CC08F250B6D4A90477, 0x4AED84EE58FE6D7450FC0F545E93E58B, 
    0x4408C56FA04B5DA9DDC2FAA884058DDC, 0x8E017E074C058F1DA67362E036FBF735, 0x0E5D8427DE2A5DA115CE8F784DAAB89E, 0xE12129A0FB34C0D7EFAED50B3BBE95E7, 
    0x4C1C9CE05F9603F3EAA4D23495965BE8, 0x9BF86E22991C93AE6C49CB2E864DCC23, 0xA4AC84BA3441FD6C4C553B6AE630F052, 0x793BD9A819D0968075923E06EA354C03, 
    0xAD7EC16459085D040F3B4E8B091A831B, 0x4C02893EB551D2F6496CA5E98487996C, 0xEAFD83FB0241DAAEF208CA9A81B0381A, 0x3574B8DAC1299F13C1F7573C30E7E2DD, 
    0x2A0360C3725C883B9C74B0107EB995F1, 0xB966D82AC672F16CA60DECF34203293D, 0x25C59EADFCBC1B32D77AE7067CFC9378, 0xF4E9CE6FAB5973FEC5CDD2296CED89B1, 
    0xFFC40030C5C7BC2F15718D86FD6E6AB8, 0x2964EC40D85ADAFCC28307E41D8A6E53, 0x90E8AA61EC983B90429CA0A1D3EFCB40, 0x9301264E2688E453EB0FA6C19915D2F9, 
    0x8C104E2ECF0112D2191C2817C713BBD8, 0x80044147289DA1EA84ADC7BB2BCD5000, 0x8C4C7CEDD86AFF4180EFDE8078C05F80, 0x038DC1B5026D33555EBFC229893D2637, 
    0xB5C73B3AFA4E83D07D77AEC41D13AD11, 0xA204ED08617AFA587D42F8619E14E28D, 0xD080789DAF1C1E43B15B506087BB619A, 0x24597806C3D98541BE02CB2D9F1ED92F, 
    0x7A17AFBF45EC57198E0BB3CBA0A3DB75, 0x134EB63A4987E1FF6F49EA79FB270E35, 0xF9FD4A9C30022BFD3F2F0EFF9B7CA45F, 0x6FC9B774ABDB0A718C0A3145C500842E, 
    0x468CCF7E5EFC6E57D63F041EE0AF0265, 0x9EFA2F900A8B4D5816DCF555B3464F21, 0xF895A5DA628FA0E9D171B91F463FEF13, 0xA1A29D028B6E49D36F6B620D47624E80, 
    0x8B0B5F8800C70008200B6C4F99EC9FDE, 0xF0AD423169FD3B5C2EE176F9F4697456, 0x73242FB4F44D9EFEE3C65DD6F4E52A56, 0xFBFF8EF8A49A0ED042C686B3EC904033, 
    0xD92A31BF4B30063D0A358B394DD59034, 0x65C15BBAB930D30EA202F54C084A2A6F, 0xEA6BB67BC62DD88B8802B8C3C33A4E99, 0x80A10744C0962EA02800479EE3D42427, 
    0xD27EE2CE5BCEAC8966C464CA1DAD530E, 0xCA414B37D2907BBD14FF74CDD6008AA7, 0x243621EDD2181B43D95DADD17020CFD9, 0xF367B9440D9189DF887E8093AE4A537B, 
    0xC1FED39E3D33A407A10AE2D3E8D7C58D, 0xB343C1A7B7CCEA4B321135BD48AE7AB1, 0x212079158D1D5100D6EE654D94737371, 0x63E703111374BD33FB19F6417D541C5A,
    0x910A0597A714FF23989984DF5373A802, 0x577EE6E07D6812F7979CED9F1C4F0E1E, 0x3982B5AF0871F1824A965EE242D34EE7, 0x01EFE8E54F97D1D2A2AA795DD7B5C28A,
    0x2BF4FEE0D778E4906CB264E326F01324, 0x922898A9299BD1D7FCB988848F22239D, 0xEABCFD76ABD1ED6F958D1477A7E76FA4, 0xBB23409B424317BA6EB1FB934A04A63E,
    0x977D096ABFB91FAA4FB5E69BFB3799A2, 0x6A3E8739D430E7E93409C8F93DBB6D22, 0xAD443202306119BFDF7F1BDA0DF73976, 0x5CF3B970084B2EB119B158BD3AD07A36,
    0xA55AC383228A68C4895B982D3B4DC571, 0x6849216EA49EB2E061FFD94DDF31A399, 0xF9AA1B58C62503D499180D69C31098F9, 0x537DC8503C6F8F78F29E4C0FF78F158E,
    0x879E2B952DF7A5EEAEA138AC85020F36, 0x4F27805B447C616C751735DF57A3F110, 0xA5E608BDE456E3F9150E3B217602181D, 0xDDCE9EBAFF768C47B14178E486F54A1E,
    0x39F4D585AD13E9AB2F9E2866F2813654, 0x046ECAE51161E471FBD7FE4B64C606DE, 0x0C3A73FD48598AC4EBAE44CB8ABE3EED, 0xB6819D68EA7594C98AB91DEDB6D2C9C4,
    0x7DAC97A98F2365D4E00530F1F44BFE90, 0xF5112CD5D5FC9E38712E2ECE4E115703, 0x350671789119E9BEC620AE785D2F5F8A, 0x5EF7F6F393D6A0A71A19AB8B4AF6B382,
    0x1321A814702A24B1E4C986A023B210EF, 0xCB046705C7DF2CFEAFA49696E4579721, 0x7B6147D8353D878636BD1242A9918381, 0x89D20366AE66AA8E8F4CC6E03869CC65,
    0x4FA55010FE4899230E641C0C1B902D9C, 0xEA5B6678D05252F39F9F2A4370019FF0, 0xE039C022271D696A057039DD6E751A68, 0x5686EAB2A47FFD1E814B4BD24AE4C9F4,
    0x83F525B22B5C0BDA4B4E4AD186352B1A, 0x7E1F7A94DF4C2A1565FDD67A60DC4A62, 0x455B71411EE0C4AB10A34EC83A9CAA8C, 0xAC48F2D9834F3E1205873E7C9715C297,
    0x661DD13F8CDC0AF7CBB6F97D9ACE951E, 0x0FF5BE75F5D35ABD44D4F48960727F09, 0x3BB79B539750E987E9292B9FBB9B2F90, 0xF7F08EB414F70D965943952CEE2C33FE,
    0x717491B53DFE0ADE07F71D35BBAE3A22, 0xD7ABA46A3333F455872D0CF628BD0F84, 0x0AE2168A512E8DE93A55C51292557715, 0xFB579D446845B00E7846706D02CDE8B7,
    0x130E4DF56A64A5E4B2D2279C90E3AD06, 0x255EC7493C45CDD4C3AB6CBAA093A463, 0x19CD5E01761EA0D96028F3AE952AEFEC, 0xAFF94F7E40231EA77A2FE69311E36BD1,
    0xABEF036496EEA7314F75DDA99E49624F, 0x2E4A66E14048E56B0CF73B40F1B30C9F, 0x03B0A82AC1A47CA30AC293E74D7BFDFA, 0x7F2185AB1A22152B0BB8D3E54E925156,
    0x80B73A4FEB7B1970E3C26B0226B98FA8, 0xEB989D7A5A9B4F48989DBAF82645BC26, 0x023CEFFFCE32903106196F241591CA2A, 0xEB4FA797C2A8EFAEB31D5FCA77F784CA)

if __name__ == "__main__":
    from random import randrange

    lim = 1 << 64

    '''rng = XoroshiroBDSP(0x12345678)
    for i in range(10):
        print(i, hex(rng.next()))'''
    
    #x = XoroshiroBDSP.recover_state_from_128_lsb(5)

    '''seed = randrange(0, lim)
    advc = 12_345_678

    rng1 = Xoroshiro(seed)
    rng1.advance(advc)
    print(hex(rng1.state))

    rng2 = Xoroshiro(seed)
    rng2.jump_ahead(advc)
    print(hex(rng2.state))'''
    
    for _ in range(10_000):
        seed = randrange(0, lim)
        
        rng = Xoroshiro(seed)
        rng.advance(42)
        
        state = rng.state

        bits = [rng.next() & 1 for _ in range(128)]

        test = Xoroshiro.recover_state_from_128_lsb(bits)
        
        assert test == state, f"expected: {state:032X} | output: {test:032X}"