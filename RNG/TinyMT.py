import os, sys
sys.path.append(os.path.dirname(__file__) + "\..")

from Util.Bits import reverse_lshift_xor_mask, reverse_rshift_xor_mask, bits_to_int, bits_to_ints

class TinyMT:    
    A = 0x8F7011EE
    B = 0xFC78FF1F
    C = 0x3793FDFF
    M = 0x6C078965

    def __init__(self, seed=0, state=None):
        if state is not None:
            self._state = state.copy()
            self._period_certification()
        else:
            self._state = [seed & 0xffffffff, TinyMT.A, TinyMT.B, TinyMT.C]
            for i in range(1, 8):
                self._state[i & 3] ^= (TinyMT.M * (self.state[(i - 1) & 3] ^ (self.state[(i - 1) & 3] >> 30)) + i) & 0xffffffff
                                                                                                                   
            self._period_certification()
            self.advance(8)
    
    @property
    def state(self):
        return self._state.copy()

    def next(self):
        self._next_state()
        return self._temper()
    
    def prev(self):
        self._prev_state()
        return self._temper()

    def jump_ahead(self, n):
        i = 0
        
        while n and i < 127:
            if n & 1:
                jump = TINYMT_JUMP_TABLE[i]
                s0 = s1 = s2 = s3 = 0

                while jump:
                    if jump & 1:
                        s0 ^= self._state[0]
                        s1 ^= self._state[1]
                        s2 ^= self._state[2]
                        s3 ^= self._state[3]

                    self._next_state()
                    jump >>= 1
                
                self._state = [s0, s1, s2, s3]
            
            n >>= 1
            i += 1 

    def advance(self, n=1):
        for _ in range(n):
            self._next_state()
    
    def back(self, n=1):
        for _ in range(n):
            self._prev_state()
    
    def rand(self, lim):
        return (self.next() * lim) >> 32
    
    def prev_rand(self):
        return (self.prev() * lim) >> 32
    
    def _next_state(self):
        x = (self._state[0] & 0x7fffffff) ^ self._state[1] ^ self._state[2]
        y = self._state[3]

        x ^= (x << 1) & 0xffffffff
        y ^= (y >> 1) ^ x

        self._state[0] = self._state[1]
        self._state[1] = self._state[2]
        self._state[2] = x ^ (y << 10) & 0xffffffff
        self._state[3] = y

        if y & 1:
            self._state[1] ^= TinyMT.A
            self._state[2] ^= TinyMT.B
            
    def _prev_state(self):
        y = self._state[3]
        x = self._state[2] ^ (y << 10) & 0xffffffff

        self._state[2] = self._state[1]
        self._state[1] = self._state[0]

        if y & 1:
            self._state[2] ^= TinyMT.A
            x ^= TinyMT.B

        y = reverse_rshift_xor_mask(y ^ x)
        x = reverse_lshift_xor_mask(x)

        self._state[3] = y
        self._state[0] = x ^ self._state[1] ^ self._state[2]
        
        x_ = (self._state[2] ^ (y << 10) ^ (y & 1) * TinyMT.B) & 0xffffffff
        xor = (self._state[1] >> 31) ^ (y & 1) ^ (x_ >> 31) ^ (reverse_lshift_xor_mask(x_) >> 30) & 1

        if xor:
            self._state[0] ^= 0x80000000

    def _temper(self):
        t = (self._state[0] + (self._state[2] >> 8)) & 0xffffffff
        return self._state[3] ^ t ^ (t & 1) * TinyMT.C
    
    def _period_certification(self):
        if self._state[0] & 0x7fffffff == 0 and self._state[1] == 0 and self._state[2] == 0 and self._state[3] == 0:
            self._state = [ord('T'), ord('I'), ord('N'), ord('Y')]
    
    def __repr__(self):
        return f"S[0]: {self._state[0]:08X}\nS[1]: {self._state[1]:08X}\nS[2]: {self._state[2]:08X}\nS[3]: {self._state[3]:08X}"

    @staticmethod
    def advance_state(state, n=1):
        rng = TinyMT(state=state)
        rng.advance(n)
        return rng.state

    @staticmethod
    def backward_state(state, n=1):
        rng = TinyMT(state=state)
        rng.back(n)
        return rng.state

    @staticmethod
    def reverse_init_loop(s):
        for i in range(7, 0, -1):
            s[i & 3] ^= (TinyMT.M * (s[(i- 1) & 3] ^ (s[(i - 1) & 3] >> 30)) + i) & 0xffffffff

    @staticmethod
    def recover_seed_from_state(state, min_advc=0, max_advc=10_000):
        rng = TinyMT(state=state)
        rng.back(8 + min_advc) # advances of 8 in the constructor
        advc = max_advc - min_advc

        for _ in range(advc + 1):
            s = rng.state
            TinyMT.reverse_init_loop(s)
            
            if s[3] == TinyMT.C:
                if s[1] == TinyMT.A and s[2] == TinyMT.B:
                    return s[0]
                
                c = rng.state
                c[0] ^= 0x80000000
                TinyMT.reverse_init_loop(c)
                
                if c[1] == TinyMT.A and c[2] == TinyMT.B:
                    return c[0]
            
            rng._prev_state()
        
        return -1
    
    @staticmethod
    def recover_state_from_127_lsb(bits):
        if len(bits) != 127:
            raise ValueError("127 bits are needed to recover the internal state.")

        vec = bits_to_int(bits)
        
        state_bits = [(vec & MAT_TINYMT_127_LSB_INV[i]).bit_count() & 1 for i in range(127)]        
        state_bits.insert(31, 0)
        
        return bits_to_ints(state_bits)

    @staticmethod
    def recover_seed_from_127_lsb(bits, min_advc=0, max_advc=10_000):
        state = TinyMT.recover_state_from_127_lsb(bits)
        return TinyMT.recover_seed_from_state(TinyMT.advance_state(state), min_advc+1, max_advc+1)

TINYMT_JUMP_TABLE = (
    0x00000000000000000000000000000002, 0x00000000000000000000000000000004, 0x00000000000000000000000000000010, 0x00000000000000000000000000000100, 
    0x00000000000000000000000000010000, 0x00000000000000000000000100000000, 0x00000000000000010000000000000000, 0xB0A48045DB1BFE951B98A18F31F57486, 
    0xE29D1503EE564039342D0C6DC777E228, 0xFD7A37B1ACAA78239951A06456708B7E, 0x5AB81FCD13CCD9FACE6673B3D158340E, 0xE7D0C5907AEE0EEA090D98E45A895878, 
    0x2E1BD6473D09382661DEF4964EC4AB34, 0x33AE14E5D2005A71334A0FE77AB182DE, 0xD654B5930B12FE3E3794CC23A5DE8A5E, 0x0586E1D6B2670A7586BF0979D37C9A1E, 
    0x8D859B2A345B1A3FE2D08EC75DB83196, 0x9D2132EAC57EDC3AD8731C41BCF9F318, 0xA5C8C0D51E1123352EBB41367C1E3386, 0x7C5C99EA483C815A9F1173B680F6752E, 
    0x658CD2F421D18C0441FBD20233BCB628, 0x694898799783DB46C8FC1F0F485CC220, 0x4CF6C5ECC4826E0B8E695F0109724EB6, 0xF20CEF18F4CD9A967478B18CFD3CCB36, 
    0x9F0DE9FE452BC1107FEB70C475EFDA16, 0xABF913E20FCBE6351AD541A07A6C610A, 0x20999170716CA869203777CA7D356342, 0x5DCB2D78B3E9CA0F7222F0529A9DD99C, 
    0x197365AC9569A8B46DD7A644730F081A, 0xF2156D44B37E61BE80BFD2B6153ED5CC, 0xAC7A0AB2F43B15A9227DF3DE640734F4, 0x40AFEA91E9AD4B2C58440D15DED1D336, 
    0x67D91EA8C53EB5A1F87CCCC392BD556E, 0xEADBDFD3910F33E8EB165D1A12900918, 0x60817118082207809D84E21D927F8F48, 0xF3F4C9156771A41BDA996196759F4C32, 
    0x12E70CFF669915F0E53B60CE75BD230C, 0x55F7ABC7DCA69D74DDF5DCC069DB2E2E, 0x4D082E8AC46696CCC3FC01335D682176, 0x11C01E9679393DE79A81B519A7CB9050, 
    0xFFACCD348466EFA086AA4EB1CC018FE2, 0x1D597217142AC79EA9A13E6E73E761A6, 0x833069B6FFA50324D7E92697C2916D9E, 0x9AFF858C3190E72CD61721F48ECCCA54, 
    0xF03383D90915D86A7878F99255E87B10, 0x8686515401A99862C91B2AD5EE85CDCC, 0x4559986D0C4932034704825523A9354A, 0x402B157281A72980494823EAB3FBCDDC, 
    0xB225D3ED9DFE42FD4E985BA913081146, 0x8CF6EAC53B7B0F4B250A0CE568F2E4E4, 0xBD2A30F31380273075A7AECB11236AFC, 0x9A6EA9058BFB6132A0677DC0A40D42DC, 
    0x131E3EDB0796AE4763CB26B386C95300, 0xA88F683284E84CC6ED1A3B499633C7C0, 0x4E1503A664DEBE8FAE907BFD7708A50C, 0x38B88E42BF48F09ECBDDD8075FA90EF8, 
    0xB189DEBA695D57F3516021387E0CCD40, 0xB9900A3296CA282C74119BC384E0680C, 0x93404466589FBBF7DB94454ECE93784A, 0xE4399B4AEB7AF4753E9D67F6AF77D6A0, 
    0xD534D9FDE02158FA1DD34BD302B66808, 0xDE0759D5D5D275DB2E8D4E926741396A, 0xB99E6F50492821009A9A7FAFB1BCDCD6, 0x9C4A2173BFB29456DDA015850A11FEA0, 
    0xD443589A277A5CAD3463DE5C5092BCAA, 0x53C7BF9374228B0185930921A6001B74, 0x4D17039CB927E1094118BA45757BFF06, 0x88337F9F252804EBFC7ECF95CFC51384, 
    0xCFB77887458D80F11C560AEA4307DA9E, 0x4A4FBC21E46F396985397BAFE4F9CBA2, 0x27ED464113F0AF2EE773322FC53CD3DC, 0x21038341CE7A3322386C38ED64340258, 
    0xEFC58F4DF9745DEB300ED4D484456EDE, 0x3DE86881CD4AAE323B6BDB6DF7E2F5FE, 0x35D662333B14448867CBDC2F03431360, 0xDB2ABD83A3EF957807247FF310F2E986, 
    0xEC0C8A7C6440F1A6F49C5BD84957DE64, 0xC0EDA41733F0C388C730A1CD9A6B93A6, 0x7958E7F96303E82FF036C0A953C3102A, 0x4669E0FB176B212B5EBB6693C3FAE610,
    0x6A2EAEE5590D7AF04AC65910189F7DB4, 0x74CC70546B5753AB8D4D69A77AA67982, 0x9709D8A82CB62991FDAC3B1F90D1F3A0, 0xB1E7F085468A4C0AAE64DA2455938668,
    0x2555A7147FAAE588D9F5D1467766CF9E, 0xAA6870F64EDC65262AC0622807AE8AF8, 0x666F76384A5BF3D243B1CA60CDF6D95E, 0x97714FBB14C73F08AD7A9B1490373ECE,
    0x248F00F3F6001B256FDD7E547D34E020, 0xCBB9D190F0D4062AB96E35331837B954, 0xB498DA5F2F1616C27C6531A8FAD996DE, 0xF3CB9438E8B2E41E279F38FC837AE126,
    0x791E369C5543C473DD72211BF31657A8, 0x3CB2278054AAF5D6A623F5DC36D1AAA2, 0x12673D2D555E927C4101D6C2964005F6, 0x9B0F7AC0CB3ACD7FB39270B4F6C9D82E,
    0x0BAD719CA5746382808AA43B6A459A4E, 0x13C4DACF957D524DA1A049931A695794, 0x784CF616ADA5E3B564C4EF17422AD818, 0xAFB88704CBE2A6B350273EE9B4362EEA,
    0x90B072AF7CA177A33BD4D3E5120738A6, 0x446D5CE91994CE74D0E2FC227BE175E4, 0x91B3D6A65BEA6B297F705FAA49B8638C, 0xBBB7E4F2FDEB46549E45A22C8512456E,
    0xEFD6CA37FC2EBD047F02F6AD8737B00A, 0xFCB7BD9CD3641DDC8B3091882F9DB150, 0x68B8272BB1E8DD7E92049D350E47ACB0, 0x1DE6058C35791CF7360AA7B535AA7C00,
    0xDF446A0E6A947495CC537BD99907EA5E, 0xA74793AACF29AE3674B9EC1A7475858A, 0xC9E2B998CAF2E031024B9AFACE91A8CA, 0xA3A8C14CBA62DE212A99511B1C543178,
    0xAD8B2FA72588F3F3E73BFFCABBBA0A40, 0xAAF4544FCD5F81BE4D3C54A05D45CD62, 0x3F00CDC5B57D07650A01DD22EA44AD88, 0x144C81B476CA3C3B8399CB43AEA8B2A6,
    0xCD16AAFA413F07D7971FA4C56600D664, 0x26C3A79369E2D08A098C7ABCA4FFEE70, 0xDF8A90B8E784692C71F6A93A1957ECC8, 0x5CF1603CB8E824E19A19BE32A0B924F4,
    0xF7B5CC51E054A38D50683B9062B53AE2, 0xFAC3E457758F997275976CBBA9BA6970, 0x8B03548B533293C951ECD2E2E1A2F124, 0xCF64A3AE991AEEF8E4D35E65629E8FAC,
    0x2C757ADD73CABE4A686D548AC27641C4, 0xE7A83E8A4B179F48AEEC0AB3E7829B7E, 0x7621D50D52C16CA9EC42D129DC8927E4)

MAT_TINYMT_127_LSB_INV = (
    0x5FC1AAB2E39C4434AF630C9B9374B832, 0x1085296E28C0425ABD3BDA1869A675F1, 0x31C7020BDEBC413D2C23BA331C3BE6FC, 0x224AEB96ADD3739269E216E9BBD26EC9, 
    0x2A335AD5F6E13D067E22D643E79CD92E, 0x2EC75958BA057AD8DEB7E9E63117D9AB, 0x2CD358B8CFE73970E769C722C8A18CB0, 0x2DEB94943D604BB253582C1F25385E43, 
    0x2D6C077E2A7A2373347150FC3CB5F0FE, 0x2D2343FDB9BAB82A02FF951D9B993151, 0x5D237E3D6F7DCB492F551181AE422688, 0x30C48335335FEB7FDECC07E80CC01041, 
    0x4B79F55CC2563B50A925A653684A5D01, 0x668CDA849CD2E78C16F3746C77F1BD4D, 0x40160FF7C6DB891D1E6349B08F0545C8, 0x32F3516717ECA59FFA7967F7689DD586, 
    0x7DA1B0D3E68B56C34A3130D70705F98C, 0x026822282FAD804BA827F3266CCF66A6, 0x71441643F3F1F14EEC6D5D890574B761, 0x4C66DA6DF0F8D52D90C1691508849DD0, 
    0x68D2E0330E2D5AB6342643143AFBB98C, 0x3869A1AD6FF21DBD18913AE950077189, 0x3D18DB386EE006904314746FD0E3D31C, 0x0AB10C8B50A4DEE18B313D3B9506DFBF, 
    0x15223BA0BFA7AF5FD26ADC5840EA9CA6, 0x4565CEF9CF39E9A95B1D11B300831BD9, 0x4237CE9AA242A7365675B6334942AFE4, 0x2E35B759CB0A7AF50B6373C3E47CC7F7, 
    0x304DBF0B31290B888128290B400B43A1, 0x357CE0F104B37FABF4E3ED4C8F5BEDDC, 0x36B366315D351E0749DC908D9BA36CA6, 0x67D115472AB57723D30A49F0BE13CA27, 
    0x210A52DC518084B57A77B430D34CEBE2, 0x638E0417BD78827A584774663877CDF8, 0x4495D72D5BA6E724D3C42DD377A4DD92, 0x5466B5ABEDC27A0CFC45AC87CF39B25C, 
    0x5D8EB2B1740AF5B1BD6FD3CC622FB356, 0x59A6B1719FCE72E1CED38E4591431960, 0x5BD729287AC09764A6B0583E4A70BC86, 0x5AD80EFC54F446E668E2A1F8796BE1FC, 
    0x5A4687FB7375705405FF2A3B373262A2, 0x6214BC58337669D8D36673C4C47EF753, 0x6189066A66BFD6FFBD980FD019802082, 0x4EA1AA9B692189EBDF871C61486E0041, 
    0x154BF52BD4283052A02AB81F7719C0D9, 0x587E5FCD603AED70B10AC3A686F031D3, 0x65E6A2CE2FD94B3FF4F2CFEED13BAB0C, 0x23112185209B52CC19AE316996F1495B, 
    0x04D044505F5B0097504FE64CD99ECD4C, 0x3ADA6CA50A6E1DD75516EBD59213D481, 0x409FF4F90C7C5511AC4E82ED89F381E3, 0x09F78044F1D74A26E580D6EFED0DC95B, 
    0x70D3435ADFE43B7A312275D2A00EE312, 0x7A31B670DDC00D208628E8DFA1C7A638, 0x15621916A149BDC316627A772A0DBF7E, 0x2A4477417F4F5EBFA4D5B8B081D5394C, 
    0x5299DDD173FE2C183BF673A199FC8DF1, 0x5C3DDD17A908B12621273CA10A7FE58B, 0x5C6B6EB39614F5EA16C6E787C8F98FEE, 0x609B7E16625217110250521680168742, 
    0x6AF9C1E20966FF57E9C7DA991EB7DBB8, 0x6D66CC62BA6A3C0E93B9211B3746D94C, 0x29C784A6A5568164503ADBF47515BD8E, 0x17F06AACB8E7110D2BD8C326E4DD2E0D,
    0x4214A5B8A301096AF4EF6861A699D7C6, 0x1F4E480D977CFBBE3D42B80BE81521B1, 0x5179EE785AC031032A440B6177B30165, 0x709F2B7536090B53754709C80689DEFB,
    0x634F254005981429F713F75F5CA5DCED, 0x6B1F22C1D2111A89106B4C4CBA7C8881, 0x6FFC1272180CD183C0ACE0BB0C1BC34D, 0x6DE25DDA446572865C0913376A2D79B9,
    0x6CDF4FD40B671FE2863204B1F69E7F07, 0x1C7B38928B612CFB2B00B74E100754E5, 0x1B404CF620F252B5F6FC4F67ABFAFB47, 0x451115143FCEEC9D32C268050826BAC3,
    0x2A97EA57A85060A54055703EEE3381B2, 0x68AEFFB82DF825ABEFD9D78A951AD9E5, 0x139F05BEB23F69356429CF1A3A8DEC5B, 0x4622430A4136A598335C62D32DE292B6,
    0x09A088A0BEB6012EA09FCC99B33D9A98, 0x75B4D94A14DC3BAEAA2DD7AB2427A902, 0x596DA9D0F5755569D551551C8B1DB985, 0x13EF0089E3AE944DCB01ADDFDA1B92B4,
    0x39F4C697524589BEEF88BB62D8E77C65, 0x2C312CC3560DE50B819D8178DB75F631, 0x2AC4322D42937B862CC4F4EE541B7EFC, 0x5488EE82FE9EBD7F49AB716103AA729A,
    0x7D61FB800A71A77AFA20B784AB03A1A3, 0x6029FA0DBF9C9D06CF8229858C057157, 0x60849D45C1A4149EA0419FC80909A59D, 0x1964BC0E2929D168896CF4EA98D7B4C7,
    0x0DA1C3E6FF4001E55E43E5F5A5950D33, 0x029FD8E799598757AABE12F1F67708DB, 0x538F094D4AAD02C8A075B7E8EA2B7B1E, 0x00000000000000000000000000000001,
    0x2FE0D55971CE221A57B1864DC9BA5C1B, 0x2C5A74B839DD8BB19CC00AD28F07F1E0, 0x4A720DD3649F6BAEDFC56F6041225140, 0x7C65CA851821DEF534C7A7622C00F108,
    0x65900965447075B9B7C6FA367912AEEC, 0x682E512FC7A0B699366CE0E4327C4AEE, 0x6E4CB6F3ECC3EEB97A63B9B5227DCE30, 0x6D2DFFF0055D90CC0FFD0BA97EB1D4CA,
    0x6CB2BBA4872C5458A8153A9557888E2E, 0x6C6953459FBAC32CF45B46DC15A56C7E, 0x541FC4C95B80E3C9C720F53F861BA70B, 0x4D333E27A3743A4F8636DDD3D6571DE4,
    0x05C38130E9BA8089D65FA3DB74BBB068, 0x17DD0C7A4EDC68C7C80C8A175B15CB1D, 0x11F17EF4B8D74FF5EE297FE89F0A0CFF, 0x065FDA88C86A164D1869BAA6BEDA2A2E,
    0x56F84BD255921CD522DBCB85FC53CEC2, 0x34D0A0D05A5DFA50D294B6D72674FA16, 0x6C43AC04CDE558343C1C637DDFB1F5AA, 0x072890C75F10157433602A524102CBE9,
    0x2E2756F3F4956E14A6D9F836C4801BEE, 0x71EDBF8AE3B8999937F6C426688320AF, 0x5032E556CE3A1423574DF53CA3C0B659, 0x760A09E2E9903530812CE1E83DFAFD80,
    0x1CB5DFD65A35F420803AD4D4F770758E, 0x24AD2AB1669E32352590BD62E9797E69, 0x79497EFBA9C2BF824CAAB126C6CF8E08, 0x3F706E013FA62F5B5D072B37391EFEE7,
    0x1AF88BBFA602279D50F9F92236659E89, 0x349F032662C1244FB87956B1361DE8E8, 0x56CF952B2BD04897FB378A9434CDBF5E)

if __name__ == "__main__":
    from random import randrange

    '''seed = randrange(0, 1 << 32)
    rng = TinyMT(seed)
    it = 10_000

    a = [rng.next() for _ in range(it)]
    rng.next()

    b = [rng.prev() for _ in range(it)]
    b.reverse()

    print(a == b)'''

    '''s = randrange(0, 1 << 32)
    a = randrange(0, 10000)
    
    tinymt = TinyMT(s)
    tinymt.advance(a)
    
    r = TinyMT.recover_seed_from_state(tinymt.state)
    
    print(f"Recovered Seed: {r:08X} | Expected Seed: {s:08X} | Advances: {a}")'''

    '''seed = randrange(0, 1 << 32)
    rng = TinyMT(seed)

    a = rng.state

    rng.jump_ahead((1 << 127) - 17)
    rng.advance(16)

    b = rng.state

    print(a == b)
    '''        

    '''for _ in range(10_000):
        seed = randrange(0, 1 << 32)
        a = randrange(0, 100)

        rng = TinyMT(seed)
        rng.advance(a)

        bits = [rng.next() & 1 for _ in range(127)]

        test = TinyMT.recover_seed_from_127_lsb(bits, max_advc=100)
        
        if seed != test:
            print(hex(seed))'''

    '''seed = randrange(0, 1 << 32)
    a = 12_345_678

    rng1 = TinyMT(seed)
    rng1.advance(a)
    print(rng1)

    print()

    rng2 = TinyMT(seed)
    rng2.jump_ahead(a)
    print(rng2)'''

    '''seed = randrange(0, 1 << 32)
    rng = TinyMT(seed)
    rng.advance(randrange(0, 100))

    state = TinyMT.advance_state(rng.state)
    state[0] &= 0x7FFFFFFF

    bits = [rng.next() & 1 for _ in range(127)]
    
    test = TinyMT.recover_state_from_127_lsb(bits)

    for i in range(4):
        print(f"{state[i]:08X} {test[i]:08X}")'''